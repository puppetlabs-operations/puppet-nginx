# This vhost is managed by puppet, do not mess with it, terrible terrible things
# will happen.
#
#
# May be lifted from http://unicorn.bogomips.org/examples/nginx.conf

# this can be any application server, not just Unicorn/Rainbows!
upstream up_<%= appname %> {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server <%= unicorn_upstream %> fail_timeout=0 max_fails=0;
}

<% if @sslonly -%>
    <%= scope.function_template(['nginx/vhost/_sslonly.conf.erb']) %>
<% end -%>


server {

<%= scope.function_template(['nginx/vhost/_servername.conf.erb']) %>

<%= scope.function_template(['nginx/vhost/_listen.conf.erb']) %>

  root <%= rootpath %><% if gunicorn != true %>/public<% end %>;

  client_max_body_size 128M;

<%= scope.function_template(['nginx/vhost/_logging.conf.erb']) %>


  # tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
  # tcp_nodelay off; # on may be better for some Comet/long-poll stuff

  # we haven't checked to see if Rack::Deflate on the app server is
  # faster or not than doing compression via nginx.  It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;


  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time.  Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Real IP address of client.
    # Note: could cause issues with rack-protection if X-Real-IP
    # and X-Forwarded-For are not the same value. Will find out...
    proxy_set_header X-Real-IP       $remote_addr;

    # enable this if and only if you use HTTPS, this helps Rack
    # set the proper protocol for doing redirects:
    # proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

<% if @ssl_verify_client -%>
    proxy_set_header X-Client-Verify $ssl_client_verify;
    proxy_set_header X-Client-DN     $ssl_client_s_dn;
    proxy_set_header X-SSL-Subject   $ssl_client_s_dn;
    proxy_set_header X-SSL-Issuer    $ssl_client_i_dn;
<% end -%>

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;

    # Crazed auth section:
<% if auth['allowfrom'] != nil -%>
  satisfy any;
  <% auth['allowfrom'].split(',').reject {|i| i.empty?}.each do |allowip| -%>
  allow <%= allowip %>;
  <% end -%>
<% end -%>
<% if auth['auth'] == true or auth['auth'] == 'true' -%>
    auth_basic            "Credentials please";
    auth_basic_user_file  <%= auth['auth_file'] %>;
<% end -%>

    proxy_pass http://up_<%= appname %>;
    <%= unicorn_magic %>

  }

<% unless aliases.empty? -%>
  # equivilent of Alias /foo /bar/plop in apache
<%   aliases.each do |a,path| -%>
  location <%= a %> { root <%= path %>; }
<%   end -%>
<% end -%>

  # Anything here is added by use of "magic" so is pretty jazzy.
  <%= magic %>

}

